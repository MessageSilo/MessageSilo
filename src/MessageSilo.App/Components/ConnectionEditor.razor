@using FluentValidation.Results;
@using MessageSilo.App.Pages;
@inject IDashboardState State

<LoadingIndicator @ref="loadingIndicator" Visible=true>

    <Button Color="Color.Primary" Block Clicked="@ShowModal">Edit</Button>

    <CodeBlock>
        @Queue?.ToString()
    </CodeBlock>

    <Modal @ref="modal">
        <ModalContent Centered>
            <ModalHeader>
                <ModalTitle>Edit Connection</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                @if (queue != null)
                {
                    <Field>
                        <FieldLabel>Type</FieldLabel>
                        <Select TValue="MessagePlatformType?" @bind-SelectedValue="queue.Type">
                            <SelectItem Value="MessagePlatformType.Azure_Queue">Azure Service Bus - Queue</SelectItem>
                            <SelectItem Value="MessagePlatformType.Azure_Topic">Azure Service Bus - Topic</SelectItem>
                            <SelectItem Value="MessagePlatformType.AWS_SQS">AWS - Simple Queue Service</SelectItem>
                        </Select>
                    </Field>
                    @if (queue.Type == MessagePlatformType.Azure_Queue)
                    {
                        <Field>
                            <FieldLabel>Queue Name</FieldLabel>
                            <TextEdit @bind-Text="queue.QueueName"></TextEdit>
                        </Field>
                        <Field>
                            <FieldLabel>Connection String</FieldLabel>
                            <TextEdit Role="TextRole.Password" @bind-Text="queue.ConnectionString"></TextEdit>
                        </Field>
                        queue.TopicName = null;
                        queue.SubscriptionName = null;
                        queue.Region = null;
                        queue.AccessKey = null;
                        queue.SecretAccessKey = null;
                    }
                    @if (queue.Type == MessagePlatformType.Azure_Topic)
                    {
                        <Field>
                            <FieldLabel>Topic Name</FieldLabel>
                            <TextEdit @bind-Text="queue.TopicName"></TextEdit>
                        </Field>
                        <Field>
                            <FieldLabel>Subscription Name</FieldLabel>
                            <TextEdit @bind-Text="queue.SubscriptionName"></TextEdit>
                        </Field>
                        <Field>
                            <FieldLabel>Connection String</FieldLabel>
                            <TextEdit Role="TextRole.Password" @bind-Text="queue.ConnectionString"></TextEdit>
                        </Field>
                        queue.QueueName = null;
                        queue.Region = null;
                        queue.AccessKey = null;
                        queue.SecretAccessKey = null;
                    }
                    @if (queue.Type == MessagePlatformType.AWS_SQS)
                    {
                        <Field>
                            <FieldLabel>Queue Name</FieldLabel>
                            <TextEdit @bind-Text="queue.QueueName"></TextEdit>
                        </Field>
                        <Field>
                            <FieldLabel>Region</FieldLabel>
                            <TextEdit @bind-Text="queue.Region"></TextEdit>
                        </Field>
                        <Field>
                            <FieldLabel>Access Key</FieldLabel>
                            <TextEdit Role="TextRole.Password" @bind-Text="queue.AccessKey"></TextEdit>
                        </Field>
                        <Field>
                            <FieldLabel>Secret Access Key</FieldLabel>
                            <TextEdit Role="TextRole.Password" @bind-Text="queue.SecretAccessKey"></TextEdit>
                        </Field>
                        queue.TopicName = null;
                        queue.SubscriptionName = null;
                        queue.ConnectionString = null;
                    }
                    <UnorderedList>
                        @foreach (var error in errors)
                        {
                            <UnorderedListItem TextColor="TextColor.Danger">@error.ErrorMessage</UnorderedListItem>
                        }
                    </UnorderedList>
                }
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" Clicked="@Save">Save Changes</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

</LoadingIndicator>

@code {
    [Parameter] public ConnectionSettingsDTO Queue { get; set; }

    [Parameter] public Dashboard Dashboard { get; set; }

    private LoadingIndicator loadingIndicator;

    private Modal modal;

    private ConnectionSettingsDTO queue;

    private IEnumerable<ValidationFailure> errors = new List<ValidationFailure>();


    private Task ShowModal()
    {
        queue = Queue.GetCopy();

        return modal.Show();
    }

    private async Task Save()
    {
        await loadingIndicator.Show();

        errors = await State.SaveQueueChanges(queue);

        await loadingIndicator.Hide();

        if (errors.Count() != 0)
            return;

        Queue = queue.GetCopy();
        Dashboard.Refresh();
        await modal.Close(CloseReason.UserClosing);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (loadingIndicator != null)
            await loadingIndicator.Hide();
        await base.OnParametersSetAsync();
    }
}