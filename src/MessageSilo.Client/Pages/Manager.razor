@page "/"

@using Blazor.Diagrams
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Models
@using MessageSilo.Application.DTOs
@using MessageSilo.Client.Components
@using MessageSilo.Client.Models
@using MessageSilo.Domain.Entities
@using MessageSilo.Domain.Enums
@using MessageSilo.Infrastructure.Interfaces
@using System.Text

@inject IMessageSiloAPI api
@inject IYamlConverterService yamlConverterService

<PageTitle>Message Silo</PageTitle>

<Row>
    <Alert Color="@(errors is null ? Color.Success : Color.Danger)" @bind-Visible="@alertVisible">
        <AlertMessage>@(errors is null ? "Well done!" : "Oh no!")</AlertMessage>
        <br />
        <AlertDescription>
            @if (errors is not null)
            {
                foreach (var error in errors)
                {
                    <Span>@($"Cannot apply changes on '{error.EntityName}' because the following errors:")</Span>
                    <ul>
                        @foreach (var failure in error.ValidationFailures)
                        {
                            <li>@failure.ErrorMessage</li>
                        }
                    </ul>
                }
            }
            else
            {
                <Span>Changes applied successfully!</Span>
            }
        </AlertDescription>
    </Alert>
</Row>

<Row>
    <Column>
        <FileEdit Changed="@OnFileEditChanged" />
        <MemoEdit Rows="20" Class="mt-5" @bind-Text="@fileContent" Placeholder="Define your Entities here in YAML..." />
        <Button Color="Color.Primary" Class="mt-5" Clicked="@OnApply">Apply</Button>
    </Column>
    <Column>
        <Div Class="diagram-container" Height="Height.Is100">
            <CascadingValue Value="diagram" IsFixed="true">
                <DiagramCanvas>
                    <Widgets>
                        <GridWidget Size="20" Mode="GridMode.Point" BackgroundColor="white" />
                        <SelectionBoxWidget />
                    </Widgets>
                </DiagramCanvas>
            </CascadingValue>
        </Div>
    </Column>
</Row>

<Modal @bind-Visible="sendModalVisible">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>
                Send a message to <strong>@selectedConnection?.Name</strong>
            </ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Message body</FieldLabel>
                <MemoEdit Rows="5" Class="mt-5" Placeholder="Enter message..." @bind-Text="messageBody" />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@Send">Send</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private bool alertVisible = false;

    private IEnumerable<Entity> entities = [];

    private IEnumerable<EntityValidationErrors>? errors;

    private string fileContent = null!;

    private BlazorDiagram diagram = null!;

    private ConnectionSettingsDTO? selectedConnection;

    private bool sendModalVisible = false;

    private string? messageBody;

    protected override async Task OnInitializedAsync()
    {
        diagram = new BlazorDiagram();
        diagram.RegisterComponent<ConnectionNode, ConnectionWidget>();
        diagram.RegisterComponent<EnricherNode, EnricherWidget>();
        diagram.RegisterComponent<TargetNode, TargetWidget>();

        await ReloadEntities();
    }

    private Task ShowSendModal(ConnectionSettingsDTO dto)
    {
        Console.WriteLine("yyyyyyyy");
        selectedConnection = dto;
        sendModalVisible = true;
        this.StateHasChanged();

        return Task.CompletedTask;
    }

    private async Task Send()
    {
        await api.Send(selectedConnection!.Name, new MessageDTO()
            {
                Body = messageBody!
            });

        sendModalVisible = false;
        selectedConnection = null;
    }

    private async Task OnApply()
    {
        ApplyDTO dto = new ApplyDTO();

        var content = fileContent.Split("---", StringSplitOptions.RemoveEmptyEntries & StringSplitOptions.TrimEntries);

        foreach (var config in content.Where(p => p.Contains($"kind: {EntityKind.Target}")))
        {
            var parsed = yamlConverterService.Deserialize<TargetDTO>(config);
            dto.Targets.Add(parsed);
        }

        foreach (var config in content.Where(p => p.Contains($"kind: {EntityKind.Enricher}")))
        {
            var parsed = yamlConverterService.Deserialize<EnricherDTO>(config);
            dto.Enrichers.Add(parsed);
        }

        foreach (var config in content.Where(p => p.Contains($"kind: {EntityKind.Connection}")))
        {
            var parsed = yamlConverterService.Deserialize<ConnectionSettingsDTO>(config);
            parsed.TargetKind = dto.Targets.Any(p => p.Id == parsed.TargetId) ? EntityKind.Target : EntityKind.Connection;
            dto.Connections.Add(parsed);
        }

        errors = await api.Apply(dto);

        if (errors is null)
        {
            await ReloadEntities();
        }

        alertVisible = true;
    }

    private async Task ReloadEntities()
    {
        entities = await api.List();

        diagram.Nodes.Clear();

        foreach (var entity in entities.Where(p => p.Kind == EntityKind.Target))
        {
            var dto = yamlConverterService.Deserialize<TargetDTO>(entity.YamlDefinition);

            diagram.Nodes.Add(new TargetNode(dto, entity.Name)
                {
                    Title = entity.Name
                });
        }

        foreach (var entity in entities.Where(p => p.Kind == EntityKind.Enricher))
        {
            var dto = yamlConverterService.Deserialize<EnricherDTO>(entity.YamlDefinition);

            diagram.Nodes.Add(new EnricherNode(dto, entity.Name)
                {
                    Title = entity.Name
                });
        }

        foreach (var entity in entities.Where(p => p.Kind == EntityKind.Connection))
        {
            var dto = yamlConverterService.Deserialize<ConnectionSettingsDTO>(entity.YamlDefinition);

            diagram.Nodes.Add(new ConnectionNode(dto, entity.Name, ShowSendModal)
                {
                    Title = entity.Name
                });
        }

        PlaceNodes();

        ConnectNodes();
    }

    private async Task OnFileEditChanged(FileChangedEventArgs e)
    {
        try
        {
            foreach (var file in e.Files)
            {
                var stream = new MemoryStream();

                await file.WriteToStreamAsync(stream);

                stream.Seek(0, SeekOrigin.Begin);

                var reader = new StreamReader(stream);

                fileContent = await reader.ReadToEndAsync();
            }
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    private void PlaceNodes()
    {
        if (diagram.Nodes.Count == 0)
            return;

        var centerX = ((int)diagram.Container.Width / 2) - 100;
        var centerY = ((int)diagram.Container.Height / 2) - 50;

        List<(int X, int Y)> coordinates = new List<(int X, int Y)>();

        // Calculate angle step
        double angleStep = 360.0 / diagram.Nodes.Count;
        var radius = diagram.Nodes.Count * 50;

        // Generate X, Y coordinates for each element
        for (int i = 0; i < diagram.Nodes.Count; i++)
        {
            // Calculate the angle in radians
            double angleInRadians = (Math.PI / 180) * (angleStep * i);

            // Calculate X and Y positions
            int x = centerX + (int)(radius * Math.Cos(angleInRadians));
            int y = centerY + (int)(radius * Math.Sin(angleInRadians));

            // Add the coordinates to the node
            diagram.Nodes[i].SetPosition(x, y);
        }
    }

    public void ConnectNodes()
    {
        foreach (ConnectionNode connNode in diagram.Nodes.Where(p => p is ConnectionNode))
        {
            var linkedEntities = connNode.DTO.Enrichers.ToArray();

            if (!string.IsNullOrWhiteSpace(connNode.DTO.Target))
                linkedEntities = [connNode.Id, .. linkedEntities, connNode.DTO.Target];

            for (int i = linkedEntities.Length - 1; i >= 0; i--)
            {
                string currentItem = linkedEntities[i];
                string prevItem = (i - 1 >= 0) ? linkedEntities[i - 1] : null!;

                if (prevItem is not null)
                {
                    var currentNode = diagram.Nodes.First(p => p.Id == currentItem);
                    var prevNode = diagram.Nodes.First(p => p.Id == prevItem);

                    diagram.Links.Add(new LinkModel(prevNode, currentNode)
                        {
                            TargetMarker = LinkMarker.Arrow
                        });
                }
            }
        }
    }
}
