@page "/"

@using Blazor.Diagrams
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Models
@using MessageSilo.Application.DTOs
@using MessageSilo.Domain.Entities
@using MessageSilo.Domain.Enums
@using MessageSilo.Infrastructure.Interfaces

@inject IMessageSiloAPI api
@inject IYamlConverterService yamlConverterService

<PageTitle>Manager - Message Silo</PageTitle>

<h1>Manager</h1>

<Row>
    <Column>
        <FileEdit />
        <MemoEdit Rows="20" Class="mt-5" @bind-Text="@fileContent" />
        <Button Color="Color.Primary" Class="mt-5" Clicked="@OnApply">Apply</Button>
    </Column>
    <Column>
        <Div Class="diagram-container" Height="Height.Is100">
            <CascadingValue Value="diagram" IsFixed="true">
                <DiagramCanvas></DiagramCanvas>
            </CascadingValue>
        </Div>
    </Column>
</Row>

@code {
    private IEnumerable<Entity> entities = [];

    private string fileContent = null!;

    private BlazorDiagram diagram = null!;

    protected override async Task OnInitializedAsync()
    {
        diagram = new BlazorDiagram();

        await ReloadEntities();
    }

    private async Task OnApply()
    {
        ApplyDTO dto = new ApplyDTO();

        var content = fileContent.Split("---", StringSplitOptions.RemoveEmptyEntries & StringSplitOptions.TrimEntries);

        foreach (var config in content.Where(p => p.Contains($"kind: {EntityKind.Target}")))
        {
            var parsed = yamlConverterService.Deserialize<TargetDTO>(config);
            dto.Targets.Add(parsed);
        }

        foreach (var config in content.Where(p => p.Contains($"kind: {EntityKind.Enricher}")))
        {
            var parsed = yamlConverterService.Deserialize<EnricherDTO>(config);
            dto.Enrichers.Add(parsed);
        }

        foreach (var config in content.Where(p => p.Contains($"kind: {EntityKind.Connection}")))
        {
            var parsed = yamlConverterService.Deserialize<ConnectionSettingsDTO>(config);
            parsed.TargetKind = dto.Targets.Any(p => p.Id == parsed.TargetId) ? EntityKind.Target : EntityKind.Connection;
            dto.Connections.Add(parsed);
        }

        var errors = await api.Apply(dto);

        if (errors is not null)
            foreach (var error in errors)
            {
                Console.WriteLine($"Cannot apply changes on '{error.EntityName}' because the following errors:");

                foreach (var failure in error.ValidationFailures)
                {
                    Console.WriteLine($"\t- {failure.ErrorMessage}");
                }

                return;
            }

        Console.WriteLine($"Changes applied successfully!");

        await ReloadEntities();
    }

    private async Task ReloadEntities()
    {
        entities = await api.List();

        foreach (var entity in entities)
        {
            diagram.Nodes.Add(new NodeModel(entity.Name)
                {
                    Title = entity.Name
                });
        }

        foreach (var entity in entities)
        {
            if (entity.Kind == EntityKind.Connection)
            {
                var conn = yamlConverterService.Deserialize<ConnectionSettingsDTO>(entity.YamlDefinition);

                var connNode = diagram.Nodes.First(p => p.Id == conn.Name);
                connNode.SetPosition(10, 10);

                NodeModel? lastEnricherNode = null;

                for (var i = 0; i < conn.Enrichers.Count(); i++)
                {
                    var enricher = conn.Enrichers.ElementAt(i);
                    var enricherNode = diagram.Nodes.First(p => p.Id == enricher);
                    enricherNode.SetPosition(10, 10 + (i + 1) * 100);

                    if (i == 0)
                    {
                        diagram.Links.Add(new LinkModel(connNode, enricherNode));
                    }

                    if (lastEnricherNode is not null)
                    {
                        diagram.Links.Add(new LinkModel(lastEnricherNode, enricherNode));
                    }

                    lastEnricherNode = enricherNode;
                }

                if (!string.IsNullOrWhiteSpace(conn.Target))
                {
                    var targetNode = diagram.Nodes.First(p => p.Id == conn.Target);
                    targetNode.SetPosition(10, 10 + (conn.Enrichers.Count() + 1) * 100);

                    if (lastEnricherNode is not null)
                        diagram.Links.Add(new LinkModel(lastEnricherNode, targetNode));
                    else
                        diagram.Links.Add(new LinkModel(connNode, targetNode));
                }

            }
        }
    }
}
