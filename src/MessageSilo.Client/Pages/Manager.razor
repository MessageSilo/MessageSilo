@page "/"

@using Blazor.Diagrams
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Components.Widgets
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Models
@using MessageSilo.Application.DTOs
@using MessageSilo.Client.Components
@using MessageSilo.Client.Models
@using MessageSilo.Domain.Entities
@using MessageSilo.Domain.Enums
@using MessageSilo.Infrastructure.Interfaces

@inject IMessageSiloAPI api
@inject IYamlConverterService yamlConverterService

<PageTitle>Message Silo</PageTitle>

<Row>
    <Column>
        <FileEdit Changed="@OnFileEditChanged" />
        <MemoEdit Rows="20" Class="mt-5" @bind-Text="@fileContent" />
        <Button Color="Color.Primary" Class="mt-5" Clicked="@OnApply">Apply</Button>
    </Column>
    <Column>
        <Div Class="diagram-container" Height="Height.Is100">
            <CascadingValue Value="diagram" IsFixed="true">
                <DiagramCanvas>
                    <Widgets>
                        <GridWidget Size="20" Mode="GridMode.Point" BackgroundColor="white" />
                        <SelectionBoxWidget />
                    </Widgets>
                </DiagramCanvas>
            </CascadingValue>
        </Div>
    </Column>
</Row>

@code {
    private IEnumerable<Entity> entities = [];

    private string fileContent = null!;

    private BlazorDiagram diagram = null!;

    protected override async Task OnInitializedAsync()
    {
        diagram = new BlazorDiagram();
        diagram.RegisterComponent<ConnectionNode, ConnectionWidget>();
        diagram.RegisterComponent<EnricherNode, EnricherWidget>();
        diagram.RegisterComponent<TargetNode, TargetWidget>();

        await ReloadEntities();
    }

    private async Task OnApply()
    {
        ApplyDTO dto = new ApplyDTO();

        var content = fileContent.Split("---", StringSplitOptions.RemoveEmptyEntries & StringSplitOptions.TrimEntries);

        foreach (var config in content.Where(p => p.Contains($"kind: {EntityKind.Target}")))
        {
            var parsed = yamlConverterService.Deserialize<TargetDTO>(config);
            dto.Targets.Add(parsed);
        }

        foreach (var config in content.Where(p => p.Contains($"kind: {EntityKind.Enricher}")))
        {
            var parsed = yamlConverterService.Deserialize<EnricherDTO>(config);
            dto.Enrichers.Add(parsed);
        }

        foreach (var config in content.Where(p => p.Contains($"kind: {EntityKind.Connection}")))
        {
            var parsed = yamlConverterService.Deserialize<ConnectionSettingsDTO>(config);
            parsed.TargetKind = dto.Targets.Any(p => p.Id == parsed.TargetId) ? EntityKind.Target : EntityKind.Connection;
            dto.Connections.Add(parsed);
        }

        var errors = await api.Apply(dto);

        if (errors is not null)
            foreach (var error in errors)
            {
                Console.WriteLine($"Cannot apply changes on '{error.EntityName}' because the following errors:");

                foreach (var failure in error.ValidationFailures)
                {
                    Console.WriteLine($"\t- {failure.ErrorMessage}");
                }

                return;
            }

        Console.WriteLine($"Changes applied successfully!");

        await ReloadEntities();
    }

    private async Task ReloadEntities()
    {
        entities = await api.List();

        foreach (var entity in entities.Where(p => p.Kind == EntityKind.Target))
        {
            var dto = yamlConverterService.Deserialize<TargetDTO>(entity.YamlDefinition);

            diagram.Nodes.Add(new TargetNode(dto, entity.Name)
                {
                    Title = entity.Name
                });
        }

        foreach (var entity in entities.Where(p => p.Kind == EntityKind.Enricher))
        {
            var dto = yamlConverterService.Deserialize<EnricherDTO>(entity.YamlDefinition);

            diagram.Nodes.Add(new EnricherNode(dto, entity.Name)
                {
                    Title = entity.Name
                });
        }

        foreach (var entity in entities.Where(p => p.Kind == EntityKind.Connection))
        {
            var dto = yamlConverterService.Deserialize<ConnectionSettingsDTO>(entity.YamlDefinition);

            diagram.Nodes.Add(new ConnectionNode(dto, entity.Name)
                {
                    Title = entity.Name
                });
        }

        foreach (ConnectionNode connNode in diagram.Nodes.Where(p => p is ConnectionNode))
        {
            var linkedEntities = connNode.DTO.Enrichers.ToArray();

            if (!string.IsNullOrWhiteSpace(connNode.DTO.Target))
                linkedEntities = [connNode.Id, .. linkedEntities, connNode.DTO.Target];

            for (int i = linkedEntities.Length - 1; i >= 0; i--)
            {
                string currentItem = linkedEntities[i];
                string prevItem = (i - 1 >= 0) ? linkedEntities[i - 1] : null!;

                if (prevItem is not null)
                {
                    var currentNode = FindNode(currentItem);
                    var prevNode = FindNode(prevItem);

                    diagram.Links.Add(new LinkModel(prevNode, currentNode)
                    {
                        TargetMarker = LinkMarker.Arrow
                    });
                }
            }
        }
    }

    private async Task OnFileEditChanged(FileChangedEventArgs e)
    {
        try
        {
            foreach (var file in e.Files)
            {
                var stream = new MemoryStream();

                await file.WriteToStreamAsync(stream);

                stream.Seek(0, SeekOrigin.Begin);


                var reader = new StreamReader(stream);

                fileContent = await reader.ReadToEndAsync();
            }
        }
        catch (Exception exc)
        {
            Console.WriteLine(exc.Message);
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    private NodeModel FindNode(string nodeId)
    {
        return diagram.Nodes.First(p => p.Id == nodeId);
    }
}
