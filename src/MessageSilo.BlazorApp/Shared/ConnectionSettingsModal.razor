@using SBMonitor.Core.Interfaces

<Modal @ref="@ConnectionModal">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Connection Settings</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <form>
                <div class="form-group">
                    <label for="connectionTypeOfBus">Platform</label>
                    <Select Disabled="Disabled" TValue="IPlatform" id="platform" class="form-control" @bind-SelectedValue="SelectedPlatform">
                        @foreach (var item in Platforms)
                        {
                            <SelectItem Value="@item">@item.DisplayName</SelectItem>
                        }
                    </Select>
                </div>
                @if (SelectedPlatform != null)
                {
                    <div class="form-group">
                        <label for="connectionTypeOfBus">Type</label>
                        <Select Disabled="Disabled" TValue="BusType" id="connectionTypeOfBus" class="form-control" @bind-SelectedValue="TypeOfBus">
                            @foreach (var item in SelectedPlatform.BusTypes)
                            {
                                <SelectItem Value="item">@item.ToString()</SelectItem>
                            }
                        </Select>
                    </div>
                    <div class="form-group">
                        <label for="connectionName">Name</label>
                        <TextEdit id="connectionName" class="form-control" @bind-Text="@Name" />
                    </div>
                    <div class="form-group">
                        <label for="connectionConnectionString">Connection String</label>
                        <MemoEdit Disabled="Disabled" id="connectionConnectionString" class="form-control" @bind-Text="@ConnectionString" Rows="5" />
                    </div>
                    @switch (TypeOfBus)
                    {
                        case BusType.Azure_Queue:
                            <div class="form-group">
                                <label for="connectionQueueName">Queue Name</label>
                                <TextEdit Disabled="Disabled" id="connectionQueueName" class="form-control" @bind-Text="@QueueName" />
                            </div>
                            break;
                        case BusType.Azure_Topic:
                            <div class="form-group">
                                <label for="connectionTopicName">Topic Name</label>
                                <TextEdit Disabled="Disabled" id="connectionTopicName" class="form-control" @bind-Text="@TopicName" />
                            </div>
                            <div class="form-group">
                                <label for="connectionSubscriptionName">Subscription Name</label>
                                <TextEdit Disabled="Disabled" id="connectionSubscriptionName" class="form-control" @bind-Text="@SubscriptionName" />
                            </div>
                            break;
                    }
                    <div class="form-group">
                        <label for="pinnedPathes">Pinned Pathes</label>
                        <ListGroup class="form-control">
                            <Repeater Items="@PinnedPathes">
                                <ListGroupItem>
                                    <TextEdit @bind-Text="@context.Path" />
                                </ListGroupItem>
                            </Repeater>
                        </ListGroup>
                        <Button Color="Color.Primary" Clicked="@(e => AddPath())">
                            <span data-feather="plus-square"></span>
                            New Path
                        </Button>
                    </div>
                }
            </form>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Primary" Clicked="@(e => Save())">Save</Button>
            <Button Color="Color.Secondary" Clicked="@(e => ConnectionModal.Close(CloseReason.UserClosing))">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>